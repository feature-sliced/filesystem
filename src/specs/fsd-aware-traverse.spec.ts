import { join } from "node:path";
import { test, expect, describe } from "vitest";

import {
  getAllSlices,
  getIndex,
  getSlices,
  isSlice,
  isSliced,
  isCrossImportPublicApi,
  type Folder,
  type File,
} from "../index.js";
import { joinFromRoot, parseIntoFolder } from "./prepare-test.js";

test("getSlices", () => {
  const rootFolder = parseIntoFolder(`
    ğŸ“‚ entities
      ğŸ“‚ user
        ğŸ“‚ ui
        ğŸ“„ index.ts
      ğŸ“‚ posts
        ğŸ“‚ ui
        ğŸ“„ index.ts
    ğŸ“‚ features
      ğŸ“‚ comments
        ğŸ“‚ ui
        ğŸ“„ index.ts
    ğŸ“‚ pages
      ğŸ“‚ editor
        ğŸ“‚ ui
      ğŸ“‚ settings
        ğŸ“‚ notifications
          ğŸ“‚ ui
          ğŸ“„ index.ts
        ğŸ“‚ profile
          ğŸ“‚ ui
          ğŸ“„ index.ts
  `);

  expect(getSlices(rootFolder.children[0] as Folder)).toEqual({
    user: (rootFolder.children[0] as Folder).children[0],
    posts: (rootFolder.children[0] as Folder).children[1],
  });
  expect(getSlices(rootFolder.children[1] as Folder)).toEqual({
    comments: (rootFolder.children[1] as Folder).children[0],
  });
  expect(getSlices(rootFolder.children[2] as Folder)).toEqual({
    editor: (rootFolder.children[2] as Folder).children[0],
    [join("settings", "notifications")]: (
      (rootFolder.children[2] as Folder).children[1] as Folder
    ).children[0],
    [join("settings", "profile")]: (
      (rootFolder.children[2] as Folder).children[1] as Folder
    ).children[1],
  });
});

test("getAllSlices", () => {
  const rootFolder = parseIntoFolder(`
    ğŸ“‚ shared
      ğŸ“‚ ui
        ğŸ“„ index.ts
      ğŸ“‚ i18n
        ğŸ“„ index.ts
    ğŸ“‚ entities
      ğŸ“‚ user
        ğŸ“‚ ui
        ğŸ“‚ model
        ğŸ“„ index.ts
    ğŸ“‚ features
      ğŸ“‚ comments
        ğŸ“‚ ui
        ğŸ“„ index.ts
    ğŸ“‚ pages
      ğŸ“‚ home
        ğŸ“‚ ui
        ğŸ“„ index.ts
  `);

  const allSlices = getAllSlices(rootFolder);
  expect(Object.keys(allSlices).sort((a, b) => a.localeCompare(b))).toEqual([
    "comments",
    "home",
    "user",
  ]);

  expect(allSlices.user).toEqual({
    ...(rootFolder.children[1] as Folder).children[0],
    layerName: "entities",
  });
  expect(allSlices.comments).toEqual({
    ...(rootFolder.children[2] as Folder).children[0],
    layerName: "features",
  });
  expect(allSlices.home).toEqual({
    ...(rootFolder.children[3] as Folder).children[0],
    layerName: "pages",
  });
});

test("isSliced", () => {
  expect(isSliced("shared")).toBe(false);
  expect(isSliced("app")).toBe(false);
  expect(isSliced("entities")).toBe(true);
  expect(isSliced("features")).toBe(true);
  expect(isSliced("pages")).toBe(true);
  expect(isSliced("widgets")).toBe(true);

  expect(
    isSliced({
      type: "folder",
      path: joinFromRoot("project", "src", "shared"),
      children: [],
    }),
  ).toBe(false);
  expect(
    isSliced({
      type: "folder",
      path: joinFromRoot("project", "src", "entities"),
      children: [],
    }),
  ).toBe(true);
});

describe("getIndex", () => {
  test("basic functionality", () => {
    const indexFile: File = {
      type: "file",
      path: joinFromRoot("project", "src", "shared", "index.ts"),
    };
    const fileSegment: File = {
      type: "file",
      path: joinFromRoot("project", "src", "entities", "user", "ui.ts"),
    };
    const folderSegment = parseIntoFolder(
      `
      ğŸ“„ Avatar.tsx
      ğŸ“„ User.tsx
      ğŸ“„ index.ts
      `,
      joinFromRoot("project", "src", "entities", "user", "ui"),
    );
    expect(getIndex(indexFile)).toEqual([indexFile]);
    expect(getIndex(fileSegment)).toEqual([fileSegment]);
    expect(getIndex(folderSegment)).toEqual([
      {
        type: "file",
        path: joinFromRoot(
          "project",
          "src",
          "entities",
          "user",
          "ui",
          "index.ts",
        ),
      },
    ]);
  });

  test("recognizes index.server.js as index file", () => {
    const indexServerFile: File = {
      type: "file",
      path: joinFromRoot("project", "src", "shared", "index.server.js"),
    };
    const nonIndexFile: File = {
      type: "file",
      path: joinFromRoot("project", "src", "entities", "user", "ui.ts"),
    };
    const folderSegment = parseIntoFolder(
      `
      ğŸ“„ Avatar.tsx
      ğŸ“„ User.tsx
      ğŸ“„ index.server.js
      `,
      joinFromRoot("project", "src", "entities", "user", "ui"),
    );

    expect(getIndex(indexServerFile)).toEqual([indexServerFile]);
    expect(getIndex(nonIndexFile)).toEqual([nonIndexFile]);
    expect(getIndex(folderSegment)).toEqual([
      {
        type: "file",
        path: joinFromRoot(
          "project",
          "src",
          "entities",
          "user",
          "ui",
          "index.server.js",
        ),
      },
    ]);
  });

  test("handles multiple index files", () => {
    const folderSegment = parseIntoFolder(
      `
      ğŸ“„ Avatar.tsx
      ğŸ“„ User.tsx
      ğŸ“„ index.client.js
      ğŸ“„ index.server.js
      `,
      joinFromRoot("project", "src", "entities", "user", "ui"),
    );

    expect(getIndex(folderSegment)).toEqual([
      {
        type: "file",
        path: joinFromRoot(
          "project",
          "src",
          "entities",
          "user",
          "ui",
          "index.client.js",
        ),
      },
      {
        type: "file",
        path: joinFromRoot(
          "project",
          "src",
          "entities",
          "user",
          "ui",
          "index.server.js",
        ),
      },
    ]);
  });
});

test("isCrossImportPublicApi", () => {
  const file: File = {
    path: joinFromRoot(
      "project",
      "src",
      "entities",
      "user",
      "@x",
      "product.ts",
    ),
    type: "file",
  };

  expect(
    isCrossImportPublicApi(file, {
      inSlice: "user",
      forSlice: "product",
      layerPath: joinFromRoot("project", "src", "entities"),
    }),
  ).toBe(true);
  expect(
    isCrossImportPublicApi(file, {
      inSlice: "product",
      forSlice: "user",
      layerPath: joinFromRoot("project", "src", "entities"),
    }),
  ).toBe(false);
});

test("isSlice", () => {
  const sliceFolder = parseIntoFolder(
    `
    ğŸ“‚ ui
      ğŸ“„ Avatar.tsx
      ğŸ“„ User.tsx
    ğŸ“„ index.ts
    `,
    joinFromRoot("project", "src", "entities", "user"),
  );
  expect(isSlice(sliceFolder)).toBe(true);

  const notSliceFolder = parseIntoFolder(
    `
    ğŸ“‚ shared
    ğŸ“‚ pages
    ğŸ“‚ app
    `,
    joinFromRoot("project", "src"),
  );
  expect(isSlice(notSliceFolder)).toBe(false);
});
